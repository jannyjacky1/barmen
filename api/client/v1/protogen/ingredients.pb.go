// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        (unknown)
// source: ingredients.proto

package protogen

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IngredientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IngredientRequest) Reset() {
	*x = IngredientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingredients_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientRequest) ProtoMessage() {}

func (x *IngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingredients_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientRequest.ProtoReflect.Descriptor instead.
func (*IngredientRequest) Descriptor() ([]byte, []int) {
	return file_ingredients_proto_rawDescGZIP(), []int{0}
}

func (x *IngredientRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IngredientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameEn      string `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Info        string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon        string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *IngredientResponse) Reset() {
	*x = IngredientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ingredients_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientResponse) ProtoMessage() {}

func (x *IngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingredients_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientResponse.ProtoReflect.Descriptor instead.
func (*IngredientResponse) Descriptor() ([]byte, []int) {
	return file_ingredients_proto_rawDescGZIP(), []int{1}
}

func (x *IngredientResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IngredientResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IngredientResponse) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *IngredientResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *IngredientResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IngredientResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

var File_ingredients_proto protoreflect.FileDescriptor

var file_ingredients_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x11, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x9b, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x32, 0x59, 0x0a,
	0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ingredients_proto_rawDescOnce sync.Once
	file_ingredients_proto_rawDescData = file_ingredients_proto_rawDesc
)

func file_ingredients_proto_rawDescGZIP() []byte {
	file_ingredients_proto_rawDescOnce.Do(func() {
		file_ingredients_proto_rawDescData = protoimpl.X.CompressGZIP(file_ingredients_proto_rawDescData)
	})
	return file_ingredients_proto_rawDescData
}

var file_ingredients_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ingredients_proto_goTypes = []interface{}{
	(*IngredientRequest)(nil),  // 0: proto.IngredientRequest
	(*IngredientResponse)(nil), // 1: proto.IngredientResponse
}
var file_ingredients_proto_depIdxs = []int32{
	0, // 0: proto.Ingredients.GetIngredientById:input_type -> proto.IngredientRequest
	1, // 1: proto.Ingredients.GetIngredientById:output_type -> proto.IngredientResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ingredients_proto_init() }
func file_ingredients_proto_init() {
	if File_ingredients_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ingredients_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngredientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ingredients_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngredientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ingredients_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ingredients_proto_goTypes,
		DependencyIndexes: file_ingredients_proto_depIdxs,
		MessageInfos:      file_ingredients_proto_msgTypes,
	}.Build()
	File_ingredients_proto = out.File
	file_ingredients_proto_rawDesc = nil
	file_ingredients_proto_goTypes = nil
	file_ingredients_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IngredientsClient is the client API for Ingredients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngredientsClient interface {
	GetIngredientById(ctx context.Context, in *IngredientRequest, opts ...grpc.CallOption) (*IngredientResponse, error)
}

type ingredientsClient struct {
	cc grpc.ClientConnInterface
}

func NewIngredientsClient(cc grpc.ClientConnInterface) IngredientsClient {
	return &ingredientsClient{cc}
}

func (c *ingredientsClient) GetIngredientById(ctx context.Context, in *IngredientRequest, opts ...grpc.CallOption) (*IngredientResponse, error) {
	out := new(IngredientResponse)
	err := c.cc.Invoke(ctx, "/proto.Ingredients/GetIngredientById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngredientsServer is the server API for Ingredients service.
type IngredientsServer interface {
	GetIngredientById(context.Context, *IngredientRequest) (*IngredientResponse, error)
}

// UnimplementedIngredientsServer can be embedded to have forward compatible implementations.
type UnimplementedIngredientsServer struct {
}

func (*UnimplementedIngredientsServer) GetIngredientById(context.Context, *IngredientRequest) (*IngredientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredientById not implemented")
}

func RegisterIngredientsServer(s *grpc.Server, srv IngredientsServer) {
	s.RegisterService(&_Ingredients_serviceDesc, srv)
}

func _Ingredients_GetIngredientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngredientsServer).GetIngredientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Ingredients/GetIngredientById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngredientsServer).GetIngredientById(ctx, req.(*IngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ingredients_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Ingredients",
	HandlerType: (*IngredientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIngredientById",
			Handler:    _Ingredients_GetIngredientById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingredients.proto",
}
