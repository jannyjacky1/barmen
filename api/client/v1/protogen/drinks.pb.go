// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        (unknown)
// source: drinks.proto

package protogen

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DrinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DrinkRequest) Reset() {
	*x = DrinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkRequest) ProtoMessage() {}

func (x *DrinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkRequest.ProtoReflect.Descriptor instead.
func (*DrinkRequest) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{0}
}

func (x *DrinkRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DrinkTryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DrinkTryRequest) Reset() {
	*x = DrinkTryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkTryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkTryRequest) ProtoMessage() {}

func (x *DrinkTryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkTryRequest.ProtoReflect.Descriptor instead.
func (*DrinkTryRequest) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{1}
}

func (x *DrinkTryRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DrinkTryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DrinkMarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mark int32 `protobuf:"varint,2,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (x *DrinkMarkRequest) Reset() {
	*x = DrinkMarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkMarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkMarkRequest) ProtoMessage() {}

func (x *DrinkMarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkMarkRequest.ProtoReflect.Descriptor instead.
func (*DrinkMarkRequest) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{2}
}

func (x *DrinkMarkRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DrinkMarkRequest) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{3}
}

type DrinkMarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mark            int32  `protobuf:"varint,1,opt,name=mark,proto3" json:"mark,omitempty"`
	MarkDescription string `protobuf:"bytes,2,opt,name=mark_description,json=markDescription,proto3" json:"mark_description,omitempty"`
}

func (x *DrinkMarkResponse) Reset() {
	*x = DrinkMarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkMarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkMarkResponse) ProtoMessage() {}

func (x *DrinkMarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkMarkResponse.ProtoReflect.Descriptor instead.
func (*DrinkMarkResponse) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{4}
}

func (x *DrinkMarkResponse) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *DrinkMarkResponse) GetMarkDescription() string {
	if x != nil {
		return x.MarkDescription
	}
	return ""
}

type DrinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int32   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Fortress     int32   `protobuf:"varint,2,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Complication int32   `protobuf:"varint,3,opt,name=complication,proto3" json:"complication,omitempty"`
	Volume       int32   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`
	IsFlacky     bool    `protobuf:"varint,5,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire       bool    `protobuf:"varint,6,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba        bool    `protobuf:"varint,7,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Includes     []int32 `protobuf:"varint,8,rep,packed,name=includes,proto3" json:"includes,omitempty"`
	Except       []int32 `protobuf:"varint,9,rep,packed,name=except,proto3" json:"except,omitempty"`
	Instruments  []int32 `protobuf:"varint,10,rep,packed,name=instruments,proto3" json:"instruments,omitempty"`
	Similar      []int32 `protobuf:"varint,11,rep,packed,name=similar,proto3" json:"similar,omitempty"`
}

func (x *DrinksRequest) Reset() {
	*x = DrinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinksRequest) ProtoMessage() {}

func (x *DrinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinksRequest.ProtoReflect.Descriptor instead.
func (*DrinksRequest) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{5}
}

func (x *DrinksRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DrinksRequest) GetFortress() int32 {
	if x != nil {
		return x.Fortress
	}
	return 0
}

func (x *DrinksRequest) GetComplication() int32 {
	if x != nil {
		return x.Complication
	}
	return 0
}

func (x *DrinksRequest) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *DrinksRequest) GetIsFlacky() bool {
	if x != nil {
		return x.IsFlacky
	}
	return false
}

func (x *DrinksRequest) GetIsFire() bool {
	if x != nil {
		return x.IsFire
	}
	return false
}

func (x *DrinksRequest) GetIsIba() bool {
	if x != nil {
		return x.IsIba
	}
	return false
}

func (x *DrinksRequest) GetIncludes() []int32 {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *DrinksRequest) GetExcept() []int32 {
	if x != nil {
		return x.Except
	}
	return nil
}

func (x *DrinksRequest) GetInstruments() []int32 {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *DrinksRequest) GetSimilar() []int32 {
	if x != nil {
		return x.Similar
	}
	return nil
}

type DrinkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFlacky    bool   `protobuf:"varint,2,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire      bool   `protobuf:"varint,3,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba       bool   `protobuf:"varint,4,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Mark        int32  `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	Name        string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Properties  string `protobuf:"bytes,7,opt,name=properties,proto3" json:"properties,omitempty"`
	Ingredients string `protobuf:"bytes,8,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	Icon        string `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DrinkItem) Reset() {
	*x = DrinkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkItem) ProtoMessage() {}

func (x *DrinkItem) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkItem.ProtoReflect.Descriptor instead.
func (*DrinkItem) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{6}
}

func (x *DrinkItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DrinkItem) GetIsFlacky() bool {
	if x != nil {
		return x.IsFlacky
	}
	return false
}

func (x *DrinkItem) GetIsFire() bool {
	if x != nil {
		return x.IsFire
	}
	return false
}

func (x *DrinkItem) GetIsIba() bool {
	if x != nil {
		return x.IsIba
	}
	return false
}

func (x *DrinkItem) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *DrinkItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DrinkItem) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

func (x *DrinkItem) GetIngredients() string {
	if x != nil {
		return x.Ingredients
	}
	return ""
}

func (x *DrinkItem) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{7}
}

func (x *Instrument) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Volume string `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Ingredient) Reset() {
	*x = Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient) ProtoMessage() {}

func (x *Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient.ProtoReflect.Descriptor instead.
func (*Ingredient) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{8}
}

func (x *Ingredient) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ingredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ingredient) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

type DrinkOfDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFlacky     bool          `protobuf:"varint,2,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire       bool          `protobuf:"varint,3,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba        bool          `protobuf:"varint,4,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Mark         int32         `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	Name         string        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Complication string        `protobuf:"bytes,8,opt,name=complication,proto3" json:"complication,omitempty"`
	Fortress     string        `protobuf:"bytes,9,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Recipe       string        `protobuf:"bytes,10,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Description  string        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	TriedBy      string        `protobuf:"bytes,12,opt,name=tried_by,json=triedBy,proto3" json:"tried_by,omitempty"`
	Preview      string        `protobuf:"bytes,13,opt,name=preview,proto3" json:"preview,omitempty"`
	Ingredients  []*Ingredient `protobuf:"bytes,14,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	Instruments  []*Instrument `protobuf:"bytes,15,rep,name=instruments,proto3" json:"instruments,omitempty"`
}

func (x *DrinkOfDayResponse) Reset() {
	*x = DrinkOfDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkOfDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkOfDayResponse) ProtoMessage() {}

func (x *DrinkOfDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkOfDayResponse.ProtoReflect.Descriptor instead.
func (*DrinkOfDayResponse) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{9}
}

func (x *DrinkOfDayResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DrinkOfDayResponse) GetIsFlacky() bool {
	if x != nil {
		return x.IsFlacky
	}
	return false
}

func (x *DrinkOfDayResponse) GetIsFire() bool {
	if x != nil {
		return x.IsFire
	}
	return false
}

func (x *DrinkOfDayResponse) GetIsIba() bool {
	if x != nil {
		return x.IsIba
	}
	return false
}

func (x *DrinkOfDayResponse) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *DrinkOfDayResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DrinkOfDayResponse) GetComplication() string {
	if x != nil {
		return x.Complication
	}
	return ""
}

func (x *DrinkOfDayResponse) GetFortress() string {
	if x != nil {
		return x.Fortress
	}
	return ""
}

func (x *DrinkOfDayResponse) GetRecipe() string {
	if x != nil {
		return x.Recipe
	}
	return ""
}

func (x *DrinkOfDayResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DrinkOfDayResponse) GetTriedBy() string {
	if x != nil {
		return x.TriedBy
	}
	return ""
}

func (x *DrinkOfDayResponse) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *DrinkOfDayResponse) GetIngredients() []*Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *DrinkOfDayResponse) GetInstruments() []*Instrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type DrinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drinks []*DrinkItem `protobuf:"bytes,1,rep,name=drinks,proto3" json:"drinks,omitempty"`
}

func (x *DrinksResponse) Reset() {
	*x = DrinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinksResponse) ProtoMessage() {}

func (x *DrinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinksResponse.ProtoReflect.Descriptor instead.
func (*DrinksResponse) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{10}
}

func (x *DrinksResponse) GetDrinks() []*DrinkItem {
	if x != nil {
		return x.Drinks
	}
	return nil
}

type DrinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFlacky        bool          `protobuf:"varint,2,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire          bool          `protobuf:"varint,3,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba           bool          `protobuf:"varint,4,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Mark            int32         `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	Name            string        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	NameEn          string        `protobuf:"bytes,7,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Complication    string        `protobuf:"bytes,8,opt,name=complication,proto3" json:"complication,omitempty"`
	Fortress        string        `protobuf:"bytes,9,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Recipe          string        `protobuf:"bytes,10,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Description     string        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	TriedBy         string        `protobuf:"bytes,12,opt,name=tried_by,json=triedBy,proto3" json:"tried_by,omitempty"`
	MarkDescription string        `protobuf:"bytes,13,opt,name=mark_description,json=markDescription,proto3" json:"mark_description,omitempty"`
	Icon            string        `protobuf:"bytes,14,opt,name=icon,proto3" json:"icon,omitempty"`
	Instruments     []*Instrument `protobuf:"bytes,15,rep,name=instruments,proto3" json:"instruments,omitempty"`
	Ingredients     []*Ingredient `protobuf:"bytes,16,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
}

func (x *DrinkResponse) Reset() {
	*x = DrinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drinks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrinkResponse) ProtoMessage() {}

func (x *DrinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drinks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrinkResponse.ProtoReflect.Descriptor instead.
func (*DrinkResponse) Descriptor() ([]byte, []int) {
	return file_drinks_proto_rawDescGZIP(), []int{11}
}

func (x *DrinkResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DrinkResponse) GetIsFlacky() bool {
	if x != nil {
		return x.IsFlacky
	}
	return false
}

func (x *DrinkResponse) GetIsFire() bool {
	if x != nil {
		return x.IsFire
	}
	return false
}

func (x *DrinkResponse) GetIsIba() bool {
	if x != nil {
		return x.IsIba
	}
	return false
}

func (x *DrinkResponse) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *DrinkResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DrinkResponse) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *DrinkResponse) GetComplication() string {
	if x != nil {
		return x.Complication
	}
	return ""
}

func (x *DrinkResponse) GetFortress() string {
	if x != nil {
		return x.Fortress
	}
	return ""
}

func (x *DrinkResponse) GetRecipe() string {
	if x != nil {
		return x.Recipe
	}
	return ""
}

func (x *DrinkResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DrinkResponse) GetTriedBy() string {
	if x != nil {
		return x.TriedBy
	}
	return ""
}

func (x *DrinkResponse) GetMarkDescription() string {
	if x != nil {
		return x.MarkDescription
	}
	return ""
}

func (x *DrinkResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DrinkResponse) GetInstruments() []*Instrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *DrinkResponse) GetIngredients() []*Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

var File_drinks_proto protoreflect.FileDescriptor

var file_drinks_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x10, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x0a, 0x11, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x63, 0x6b,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x63, 0x6b,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x69, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x69, 0x62, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x62,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x63, 0x6b, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x63, 0x6b, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x69, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x69, 0x62, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x62, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x48, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xb2, 0x03, 0x0a,
	0x12, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x63, 0x6b, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x63, 0x6b, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x69, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x69, 0x62, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x62, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xeb, 0x03,
	0x0a, 0x0d, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x63, 0x6b, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x63, 0x6b, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x69, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x69, 0x62, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x62, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61,
	0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xbb, 0x02, 0x0a, 0x06,
	0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4f,
	0x66, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x69, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x44, 0x72, 0x69, 0x6e, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x28, 0x0a, 0x0e, 0x72, 0x75, 0x2e,
	0x77, 0x65, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0b, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drinks_proto_rawDescOnce sync.Once
	file_drinks_proto_rawDescData = file_drinks_proto_rawDesc
)

func file_drinks_proto_rawDescGZIP() []byte {
	file_drinks_proto_rawDescOnce.Do(func() {
		file_drinks_proto_rawDescData = protoimpl.X.CompressGZIP(file_drinks_proto_rawDescData)
	})
	return file_drinks_proto_rawDescData
}

var file_drinks_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_drinks_proto_goTypes = []interface{}{
	(*DrinkRequest)(nil),       // 0: proto.DrinkRequest
	(*DrinkTryRequest)(nil),    // 1: proto.DrinkTryRequest
	(*DrinkMarkRequest)(nil),   // 2: proto.DrinkMarkRequest
	(*Empty)(nil),              // 3: proto.Empty
	(*DrinkMarkResponse)(nil),  // 4: proto.DrinkMarkResponse
	(*DrinksRequest)(nil),      // 5: proto.DrinksRequest
	(*DrinkItem)(nil),          // 6: proto.DrinkItem
	(*Instrument)(nil),         // 7: proto.Instrument
	(*Ingredient)(nil),         // 8: proto.Ingredient
	(*DrinkOfDayResponse)(nil), // 9: proto.DrinkOfDayResponse
	(*DrinksResponse)(nil),     // 10: proto.DrinksResponse
	(*DrinkResponse)(nil),      // 11: proto.DrinkResponse
}
var file_drinks_proto_depIdxs = []int32{
	8,  // 0: proto.DrinkOfDayResponse.ingredients:type_name -> proto.Ingredient
	7,  // 1: proto.DrinkOfDayResponse.instruments:type_name -> proto.Instrument
	6,  // 2: proto.DrinksResponse.drinks:type_name -> proto.DrinkItem
	7,  // 3: proto.DrinkResponse.instruments:type_name -> proto.Instrument
	8,  // 4: proto.DrinkResponse.ingredients:type_name -> proto.Ingredient
	5,  // 5: proto.Drinks.GetDrinks:input_type -> proto.DrinksRequest
	3,  // 6: proto.Drinks.GetDrinkOfDay:input_type -> proto.Empty
	0,  // 7: proto.Drinks.GetDrinkById:input_type -> proto.DrinkRequest
	1,  // 8: proto.Drinks.SetDrinkTried:input_type -> proto.DrinkTryRequest
	2,  // 9: proto.Drinks.SetDrinkMark:input_type -> proto.DrinkMarkRequest
	10, // 10: proto.Drinks.GetDrinks:output_type -> proto.DrinksResponse
	9,  // 11: proto.Drinks.GetDrinkOfDay:output_type -> proto.DrinkOfDayResponse
	11, // 12: proto.Drinks.GetDrinkById:output_type -> proto.DrinkResponse
	3,  // 13: proto.Drinks.SetDrinkTried:output_type -> proto.Empty
	4,  // 14: proto.Drinks.SetDrinkMark:output_type -> proto.DrinkMarkResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_drinks_proto_init() }
func file_drinks_proto_init() {
	if File_drinks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_drinks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkTryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkMarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkMarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkOfDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drinks_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drinks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drinks_proto_goTypes,
		DependencyIndexes: file_drinks_proto_depIdxs,
		MessageInfos:      file_drinks_proto_msgTypes,
	}.Build()
	File_drinks_proto = out.File
	file_drinks_proto_rawDesc = nil
	file_drinks_proto_goTypes = nil
	file_drinks_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DrinksClient is the client API for Drinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DrinksClient interface {
	GetDrinks(ctx context.Context, in *DrinksRequest, opts ...grpc.CallOption) (*DrinksResponse, error)
	GetDrinkOfDay(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DrinkOfDayResponse, error)
	GetDrinkById(ctx context.Context, in *DrinkRequest, opts ...grpc.CallOption) (*DrinkResponse, error)
	SetDrinkTried(ctx context.Context, in *DrinkTryRequest, opts ...grpc.CallOption) (*Empty, error)
	SetDrinkMark(ctx context.Context, in *DrinkMarkRequest, opts ...grpc.CallOption) (*DrinkMarkResponse, error)
}

type drinksClient struct {
	cc grpc.ClientConnInterface
}

func NewDrinksClient(cc grpc.ClientConnInterface) DrinksClient {
	return &drinksClient{cc}
}

func (c *drinksClient) GetDrinks(ctx context.Context, in *DrinksRequest, opts ...grpc.CallOption) (*DrinksResponse, error) {
	out := new(DrinksResponse)
	err := c.cc.Invoke(ctx, "/proto.Drinks/GetDrinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) GetDrinkOfDay(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DrinkOfDayResponse, error) {
	out := new(DrinkOfDayResponse)
	err := c.cc.Invoke(ctx, "/proto.Drinks/GetDrinkOfDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) GetDrinkById(ctx context.Context, in *DrinkRequest, opts ...grpc.CallOption) (*DrinkResponse, error) {
	out := new(DrinkResponse)
	err := c.cc.Invoke(ctx, "/proto.Drinks/GetDrinkById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) SetDrinkTried(ctx context.Context, in *DrinkTryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Drinks/SetDrinkTried", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) SetDrinkMark(ctx context.Context, in *DrinkMarkRequest, opts ...grpc.CallOption) (*DrinkMarkResponse, error) {
	out := new(DrinkMarkResponse)
	err := c.cc.Invoke(ctx, "/proto.Drinks/SetDrinkMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrinksServer is the server API for Drinks service.
type DrinksServer interface {
	GetDrinks(context.Context, *DrinksRequest) (*DrinksResponse, error)
	GetDrinkOfDay(context.Context, *Empty) (*DrinkOfDayResponse, error)
	GetDrinkById(context.Context, *DrinkRequest) (*DrinkResponse, error)
	SetDrinkTried(context.Context, *DrinkTryRequest) (*Empty, error)
	SetDrinkMark(context.Context, *DrinkMarkRequest) (*DrinkMarkResponse, error)
}

// UnimplementedDrinksServer can be embedded to have forward compatible implementations.
type UnimplementedDrinksServer struct {
}

func (*UnimplementedDrinksServer) GetDrinks(context.Context, *DrinksRequest) (*DrinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrinks not implemented")
}
func (*UnimplementedDrinksServer) GetDrinkOfDay(context.Context, *Empty) (*DrinkOfDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrinkOfDay not implemented")
}
func (*UnimplementedDrinksServer) GetDrinkById(context.Context, *DrinkRequest) (*DrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrinkById not implemented")
}
func (*UnimplementedDrinksServer) SetDrinkTried(context.Context, *DrinkTryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDrinkTried not implemented")
}
func (*UnimplementedDrinksServer) SetDrinkMark(context.Context, *DrinkMarkRequest) (*DrinkMarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDrinkMark not implemented")
}

func RegisterDrinksServer(s *grpc.Server, srv DrinksServer) {
	s.RegisterService(&_Drinks_serviceDesc, srv)
}

func _Drinks_GetDrinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetDrinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/GetDrinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetDrinks(ctx, req.(*DrinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_GetDrinkOfDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetDrinkOfDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/GetDrinkOfDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetDrinkOfDay(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_GetDrinkById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetDrinkById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/GetDrinkById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetDrinkById(ctx, req.(*DrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_SetDrinkTried_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrinkTryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).SetDrinkTried(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/SetDrinkTried",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).SetDrinkTried(ctx, req.(*DrinkTryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_SetDrinkMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrinkMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).SetDrinkMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/SetDrinkMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).SetDrinkMark(ctx, req.(*DrinkMarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Drinks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Drinks",
	HandlerType: (*DrinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDrinks",
			Handler:    _Drinks_GetDrinks_Handler,
		},
		{
			MethodName: "GetDrinkOfDay",
			Handler:    _Drinks_GetDrinkOfDay_Handler,
		},
		{
			MethodName: "GetDrinkById",
			Handler:    _Drinks_GetDrinkById_Handler,
		},
		{
			MethodName: "SetDrinkTried",
			Handler:    _Drinks_SetDrinkTried_Handler,
		},
		{
			MethodName: "SetDrinkMark",
			Handler:    _Drinks_SetDrinkMark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drinks.proto",
}
