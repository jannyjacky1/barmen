// Code generated by protoc-gen-go. DO NOT EDIT.
// source: instruments.proto

package protogen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InstrumentRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentRequest) Reset()         { *m = InstrumentRequest{} }
func (m *InstrumentRequest) String() string { return proto.CompactTextString(m) }
func (*InstrumentRequest) ProtoMessage()    {}
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{0}
}

func (m *InstrumentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentRequest.Unmarshal(m, b)
}
func (m *InstrumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentRequest.Marshal(b, m, deterministic)
}
func (m *InstrumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentRequest.Merge(m, src)
}
func (m *InstrumentRequest) XXX_Size() int {
	return xxx_messageInfo_InstrumentRequest.Size(m)
}
func (m *InstrumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentRequest proto.InternalMessageInfo

func (m *InstrumentRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type InstrumentResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameEn               string   `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Info                 string   `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Icon                 string   `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentResponse) Reset()         { *m = InstrumentResponse{} }
func (m *InstrumentResponse) String() string { return proto.CompactTextString(m) }
func (*InstrumentResponse) ProtoMessage()    {}
func (*InstrumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e1cbfd66e82bd, []int{1}
}

func (m *InstrumentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentResponse.Unmarshal(m, b)
}
func (m *InstrumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentResponse.Marshal(b, m, deterministic)
}
func (m *InstrumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentResponse.Merge(m, src)
}
func (m *InstrumentResponse) XXX_Size() int {
	return xxx_messageInfo_InstrumentResponse.Size(m)
}
func (m *InstrumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentResponse proto.InternalMessageInfo

func (m *InstrumentResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InstrumentResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstrumentResponse) GetNameEn() string {
	if m != nil {
		return m.NameEn
	}
	return ""
}

func (m *InstrumentResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *InstrumentResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InstrumentResponse) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func init() {
	proto.RegisterType((*InstrumentRequest)(nil), "proto.InstrumentRequest")
	proto.RegisterType((*InstrumentResponse)(nil), "proto.InstrumentResponse")
}

func init() { proto.RegisterFile("instruments.proto", fileDescriptor_c06e1cbfd66e82bd) }

var fileDescriptor_c06e1cbfd66e82bd = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xcc, 0x2b, 0x2e,
	0x29, 0x2a, 0xcd, 0x4d, 0xcd, 0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x4a, 0xca, 0x5c, 0x82, 0x9e, 0x70, 0xb9, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0xa6, 0xcc, 0x14, 0xa5,
	0xd9, 0x8c, 0x5c, 0x42, 0xc8, 0xaa, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0xd1, 0x95, 0x09, 0x09,
	0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42,
	0xe2, 0x5c, 0xec, 0x20, 0x3a, 0x3e, 0x35, 0x4f, 0x82, 0x19, 0x2c, 0xcc, 0x06, 0xe2, 0xba, 0xe6,
	0x81, 0x14, 0x67, 0xe6, 0xa5, 0xe5, 0x4b, 0xb0, 0x40, 0x14, 0x83, 0xd8, 0x42, 0x0a, 0x5c, 0xdc,
	0x29, 0xa9, 0xc5, 0xc9, 0x45, 0x99, 0x05, 0x25, 0x99, 0xf9, 0x79, 0x12, 0xac, 0x60, 0x29, 0x64,
	0x21, 0xb0, 0xae, 0xe4, 0xfc, 0x3c, 0x09, 0x36, 0xa8, 0xae, 0xe4, 0xfc, 0x3c, 0xa3, 0x48, 0x2e,
	0x6e, 0x84, 0xe3, 0x8a, 0x85, 0xbc, 0xb8, 0x04, 0xdd, 0x53, 0x4b, 0x10, 0x22, 0x4e, 0x95, 0x9e,
	0x29, 0x42, 0x12, 0x10, 0x5f, 0xeb, 0x61, 0xf8, 0x55, 0x4a, 0x12, 0x8b, 0x0c, 0xc4, 0x7f, 0x4a,
	0x0c, 0x49, 0x6c, 0x60, 0x39, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x1e, 0x41, 0xb2,
	0x40, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InstrumentsClient is the client API for Instruments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstrumentsClient interface {
	GetInstrumentById(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error)
}

type instrumentsClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentsClient(cc grpc.ClientConnInterface) InstrumentsClient {
	return &instrumentsClient{cc}
}

func (c *instrumentsClient) GetInstrumentById(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error) {
	out := new(InstrumentResponse)
	err := c.cc.Invoke(ctx, "/proto.Instruments/GetInstrumentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentsServer is the server API for Instruments service.
type InstrumentsServer interface {
	GetInstrumentById(context.Context, *InstrumentRequest) (*InstrumentResponse, error)
}

// UnimplementedInstrumentsServer can be embedded to have forward compatible implementations.
type UnimplementedInstrumentsServer struct {
}

func (*UnimplementedInstrumentsServer) GetInstrumentById(ctx context.Context, req *InstrumentRequest) (*InstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentById not implemented")
}

func RegisterInstrumentsServer(s *grpc.Server, srv InstrumentsServer) {
	s.RegisterService(&_Instruments_serviceDesc, srv)
}

func _Instruments_GetInstrumentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentsServer).GetInstrumentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Instruments/GetInstrumentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentsServer).GetInstrumentById(ctx, req.(*InstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Instruments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Instruments",
	HandlerType: (*InstrumentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstrumentById",
			Handler:    _Instruments_GetInstrumentById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instruments.proto",
}
