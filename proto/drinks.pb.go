// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drinks.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DrinkRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrinkRequest) Reset()         { *m = DrinkRequest{} }
func (m *DrinkRequest) String() string { return proto.CompactTextString(m) }
func (*DrinkRequest) ProtoMessage()    {}
func (*DrinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{0}
}

func (m *DrinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrinkRequest.Unmarshal(m, b)
}
func (m *DrinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrinkRequest.Marshal(b, m, deterministic)
}
func (m *DrinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrinkRequest.Merge(m, src)
}
func (m *DrinkRequest) XXX_Size() int {
	return xxx_messageInfo_DrinkRequest.Size(m)
}
func (m *DrinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DrinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DrinkRequest proto.InternalMessageInfo

func (m *DrinkRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DrinksRequest struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Fortress             int32    `protobuf:"varint,2,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Complication         int32    `protobuf:"varint,3,opt,name=complication,proto3" json:"complication,omitempty"`
	Volume               int32    `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`
	IsFlacky             bool     `protobuf:"varint,5,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire               bool     `protobuf:"varint,6,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba                bool     `protobuf:"varint,7,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Includes             []int32  `protobuf:"varint,8,rep,packed,name=includes,proto3" json:"includes,omitempty"`
	Except               []int32  `protobuf:"varint,9,rep,packed,name=except,proto3" json:"except,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrinksRequest) Reset()         { *m = DrinksRequest{} }
func (m *DrinksRequest) String() string { return proto.CompactTextString(m) }
func (*DrinksRequest) ProtoMessage()    {}
func (*DrinksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{1}
}

func (m *DrinksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrinksRequest.Unmarshal(m, b)
}
func (m *DrinksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrinksRequest.Marshal(b, m, deterministic)
}
func (m *DrinksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrinksRequest.Merge(m, src)
}
func (m *DrinksRequest) XXX_Size() int {
	return xxx_messageInfo_DrinksRequest.Size(m)
}
func (m *DrinksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DrinksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DrinksRequest proto.InternalMessageInfo

func (m *DrinksRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DrinksRequest) GetFortress() int32 {
	if m != nil {
		return m.Fortress
	}
	return 0
}

func (m *DrinksRequest) GetComplication() int32 {
	if m != nil {
		return m.Complication
	}
	return 0
}

func (m *DrinksRequest) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *DrinksRequest) GetIsFlacky() bool {
	if m != nil {
		return m.IsFlacky
	}
	return false
}

func (m *DrinksRequest) GetIsFire() bool {
	if m != nil {
		return m.IsFire
	}
	return false
}

func (m *DrinksRequest) GetIsIba() bool {
	if m != nil {
		return m.IsIba
	}
	return false
}

func (m *DrinksRequest) GetIncludes() []int32 {
	if m != nil {
		return m.Includes
	}
	return nil
}

func (m *DrinksRequest) GetExcept() []int32 {
	if m != nil {
		return m.Except
	}
	return nil
}

type DrinkItem struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFlacky             bool     `protobuf:"varint,2,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire               bool     `protobuf:"varint,3,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba                bool     `protobuf:"varint,4,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Mark                 float32  `protobuf:"fixed32,5,opt,name=mark,proto3" json:"mark,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Complication         string   `protobuf:"bytes,7,opt,name=complication,proto3" json:"complication,omitempty"`
	Fortress             string   `protobuf:"bytes,8,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Ingredients          string   `protobuf:"bytes,9,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	Preview              string   `protobuf:"bytes,10,opt,name=preview,proto3" json:"preview,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrinkItem) Reset()         { *m = DrinkItem{} }
func (m *DrinkItem) String() string { return proto.CompactTextString(m) }
func (*DrinkItem) ProtoMessage()    {}
func (*DrinkItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{2}
}

func (m *DrinkItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrinkItem.Unmarshal(m, b)
}
func (m *DrinkItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrinkItem.Marshal(b, m, deterministic)
}
func (m *DrinkItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrinkItem.Merge(m, src)
}
func (m *DrinkItem) XXX_Size() int {
	return xxx_messageInfo_DrinkItem.Size(m)
}
func (m *DrinkItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DrinkItem.DiscardUnknown(m)
}

var xxx_messageInfo_DrinkItem proto.InternalMessageInfo

func (m *DrinkItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DrinkItem) GetIsFlacky() bool {
	if m != nil {
		return m.IsFlacky
	}
	return false
}

func (m *DrinkItem) GetIsFire() bool {
	if m != nil {
		return m.IsFire
	}
	return false
}

func (m *DrinkItem) GetIsIba() bool {
	if m != nil {
		return m.IsIba
	}
	return false
}

func (m *DrinkItem) GetMark() float32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func (m *DrinkItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DrinkItem) GetComplication() string {
	if m != nil {
		return m.Complication
	}
	return ""
}

func (m *DrinkItem) GetFortress() string {
	if m != nil {
		return m.Fortress
	}
	return ""
}

func (m *DrinkItem) GetIngredients() string {
	if m != nil {
		return m.Ingredients
	}
	return ""
}

func (m *DrinkItem) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

type Instrument struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image                string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{3}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type Ingredient struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Volume               string   `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ingredient) Reset()         { *m = Ingredient{} }
func (m *Ingredient) String() string { return proto.CompactTextString(m) }
func (*Ingredient) ProtoMessage()    {}
func (*Ingredient) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{4}
}

func (m *Ingredient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ingredient.Unmarshal(m, b)
}
func (m *Ingredient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ingredient.Marshal(b, m, deterministic)
}
func (m *Ingredient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ingredient.Merge(m, src)
}
func (m *Ingredient) XXX_Size() int {
	return xxx_messageInfo_Ingredient.Size(m)
}
func (m *Ingredient) XXX_DiscardUnknown() {
	xxx_messageInfo_Ingredient.DiscardUnknown(m)
}

var xxx_messageInfo_Ingredient proto.InternalMessageInfo

func (m *Ingredient) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ingredient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ingredient) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

type DayDrink struct {
	Id                   int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFlacky             bool          `protobuf:"varint,2,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire               bool          `protobuf:"varint,3,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba                bool          `protobuf:"varint,4,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Mark                 float32       `protobuf:"fixed32,5,opt,name=mark,proto3" json:"mark,omitempty"`
	Name                 string        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Complication         string        `protobuf:"bytes,8,opt,name=complication,proto3" json:"complication,omitempty"`
	Fortress             string        `protobuf:"bytes,9,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Recipe               string        `protobuf:"bytes,10,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Description          string        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	TriedBy              string        `protobuf:"bytes,12,opt,name=tried_by,json=triedBy,proto3" json:"tried_by,omitempty"`
	Preview              string        `protobuf:"bytes,13,opt,name=preview,proto3" json:"preview,omitempty"`
	Ingredients          []*Ingredient `protobuf:"bytes,14,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	Instruments          []*Instrument `protobuf:"bytes,15,rep,name=instruments,proto3" json:"instruments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DayDrink) Reset()         { *m = DayDrink{} }
func (m *DayDrink) String() string { return proto.CompactTextString(m) }
func (*DayDrink) ProtoMessage()    {}
func (*DayDrink) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{5}
}

func (m *DayDrink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DayDrink.Unmarshal(m, b)
}
func (m *DayDrink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DayDrink.Marshal(b, m, deterministic)
}
func (m *DayDrink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DayDrink.Merge(m, src)
}
func (m *DayDrink) XXX_Size() int {
	return xxx_messageInfo_DayDrink.Size(m)
}
func (m *DayDrink) XXX_DiscardUnknown() {
	xxx_messageInfo_DayDrink.DiscardUnknown(m)
}

var xxx_messageInfo_DayDrink proto.InternalMessageInfo

func (m *DayDrink) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DayDrink) GetIsFlacky() bool {
	if m != nil {
		return m.IsFlacky
	}
	return false
}

func (m *DayDrink) GetIsFire() bool {
	if m != nil {
		return m.IsFire
	}
	return false
}

func (m *DayDrink) GetIsIba() bool {
	if m != nil {
		return m.IsIba
	}
	return false
}

func (m *DayDrink) GetMark() float32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func (m *DayDrink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DayDrink) GetComplication() string {
	if m != nil {
		return m.Complication
	}
	return ""
}

func (m *DayDrink) GetFortress() string {
	if m != nil {
		return m.Fortress
	}
	return ""
}

func (m *DayDrink) GetRecipe() string {
	if m != nil {
		return m.Recipe
	}
	return ""
}

func (m *DayDrink) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DayDrink) GetTriedBy() string {
	if m != nil {
		return m.TriedBy
	}
	return ""
}

func (m *DayDrink) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

func (m *DayDrink) GetIngredients() []*Ingredient {
	if m != nil {
		return m.Ingredients
	}
	return nil
}

func (m *DayDrink) GetInstruments() []*Instrument {
	if m != nil {
		return m.Instruments
	}
	return nil
}

type DrinksResponse struct {
	Drinks               []*DrinkItem `protobuf:"bytes,1,rep,name=drinks,proto3" json:"drinks,omitempty"`
	DayDrink             *DayDrink    `protobuf:"bytes,2,opt,name=day_drink,json=dayDrink,proto3" json:"day_drink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DrinksResponse) Reset()         { *m = DrinksResponse{} }
func (m *DrinksResponse) String() string { return proto.CompactTextString(m) }
func (*DrinksResponse) ProtoMessage()    {}
func (*DrinksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{6}
}

func (m *DrinksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrinksResponse.Unmarshal(m, b)
}
func (m *DrinksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrinksResponse.Marshal(b, m, deterministic)
}
func (m *DrinksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrinksResponse.Merge(m, src)
}
func (m *DrinksResponse) XXX_Size() int {
	return xxx_messageInfo_DrinksResponse.Size(m)
}
func (m *DrinksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DrinksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DrinksResponse proto.InternalMessageInfo

func (m *DrinksResponse) GetDrinks() []*DrinkItem {
	if m != nil {
		return m.Drinks
	}
	return nil
}

func (m *DrinksResponse) GetDayDrink() *DayDrink {
	if m != nil {
		return m.DayDrink
	}
	return nil
}

type DrinkResponse struct {
	Id                   int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsFlacky             bool          `protobuf:"varint,2,opt,name=is_flacky,json=isFlacky,proto3" json:"is_flacky,omitempty"`
	IsFire               bool          `protobuf:"varint,3,opt,name=is_fire,json=isFire,proto3" json:"is_fire,omitempty"`
	IsIba                bool          `protobuf:"varint,4,opt,name=is_iba,json=isIba,proto3" json:"is_iba,omitempty"`
	Mark                 float32       `protobuf:"fixed32,5,opt,name=mark,proto3" json:"mark,omitempty"`
	Name                 string        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	NameEn               string        `protobuf:"bytes,7,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Complication         string        `protobuf:"bytes,8,opt,name=complication,proto3" json:"complication,omitempty"`
	Fortress             string        `protobuf:"bytes,9,opt,name=fortress,proto3" json:"fortress,omitempty"`
	Recipe               string        `protobuf:"bytes,10,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Description          string        `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	TriedBy              string        `protobuf:"bytes,12,opt,name=tried_by,json=triedBy,proto3" json:"tried_by,omitempty"`
	Gallery              []string      `protobuf:"bytes,13,rep,name=gallery,proto3" json:"gallery,omitempty"`
	Ingredients          []*Ingredient `protobuf:"bytes,14,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	Instruments          []*Instrument `protobuf:"bytes,15,rep,name=instruments,proto3" json:"instruments,omitempty"`
	Similar              []*DrinkItem  `protobuf:"bytes,16,rep,name=similar,proto3" json:"similar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DrinkResponse) Reset()         { *m = DrinkResponse{} }
func (m *DrinkResponse) String() string { return proto.CompactTextString(m) }
func (*DrinkResponse) ProtoMessage()    {}
func (*DrinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b541685a91b5bd2, []int{7}
}

func (m *DrinkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrinkResponse.Unmarshal(m, b)
}
func (m *DrinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrinkResponse.Marshal(b, m, deterministic)
}
func (m *DrinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrinkResponse.Merge(m, src)
}
func (m *DrinkResponse) XXX_Size() int {
	return xxx_messageInfo_DrinkResponse.Size(m)
}
func (m *DrinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DrinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DrinkResponse proto.InternalMessageInfo

func (m *DrinkResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DrinkResponse) GetIsFlacky() bool {
	if m != nil {
		return m.IsFlacky
	}
	return false
}

func (m *DrinkResponse) GetIsFire() bool {
	if m != nil {
		return m.IsFire
	}
	return false
}

func (m *DrinkResponse) GetIsIba() bool {
	if m != nil {
		return m.IsIba
	}
	return false
}

func (m *DrinkResponse) GetMark() float32 {
	if m != nil {
		return m.Mark
	}
	return 0
}

func (m *DrinkResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DrinkResponse) GetNameEn() string {
	if m != nil {
		return m.NameEn
	}
	return ""
}

func (m *DrinkResponse) GetComplication() string {
	if m != nil {
		return m.Complication
	}
	return ""
}

func (m *DrinkResponse) GetFortress() string {
	if m != nil {
		return m.Fortress
	}
	return ""
}

func (m *DrinkResponse) GetRecipe() string {
	if m != nil {
		return m.Recipe
	}
	return ""
}

func (m *DrinkResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DrinkResponse) GetTriedBy() string {
	if m != nil {
		return m.TriedBy
	}
	return ""
}

func (m *DrinkResponse) GetGallery() []string {
	if m != nil {
		return m.Gallery
	}
	return nil
}

func (m *DrinkResponse) GetIngredients() []*Ingredient {
	if m != nil {
		return m.Ingredients
	}
	return nil
}

func (m *DrinkResponse) GetInstruments() []*Instrument {
	if m != nil {
		return m.Instruments
	}
	return nil
}

func (m *DrinkResponse) GetSimilar() []*DrinkItem {
	if m != nil {
		return m.Similar
	}
	return nil
}

func init() {
	proto.RegisterType((*DrinkRequest)(nil), "proto.DrinkRequest")
	proto.RegisterType((*DrinksRequest)(nil), "proto.DrinksRequest")
	proto.RegisterType((*DrinkItem)(nil), "proto.DrinkItem")
	proto.RegisterType((*Instrument)(nil), "proto.Instrument")
	proto.RegisterType((*Ingredient)(nil), "proto.Ingredient")
	proto.RegisterType((*DayDrink)(nil), "proto.DayDrink")
	proto.RegisterType((*DrinksResponse)(nil), "proto.DrinksResponse")
	proto.RegisterType((*DrinkResponse)(nil), "proto.DrinkResponse")
}

func init() { proto.RegisterFile("drinks.proto", fileDescriptor_9b541685a91b5bd2) }

var fileDescriptor_9b541685a91b5bd2 = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0x76, 0xe2, 0xd8, 0x93, 0xf4, 0x83, 0xa5, 0x1f, 0x4b, 0x91, 0x50, 0xe4, 0x53, 0x84,
	0x50, 0x0f, 0xed, 0x0d, 0x6e, 0x55, 0x29, 0xe4, 0xea, 0x3f, 0x10, 0x39, 0xf6, 0xb4, 0xac, 0xea,
	0x2f, 0x76, 0x9d, 0x82, 0x8f, 0xdc, 0xf9, 0x21, 0xfc, 0x3e, 0xce, 0x1c, 0xd0, 0x8e, 0x77, 0x53,
	0x3b, 0x55, 0x05, 0x27, 0xd4, 0x93, 0xf7, 0xcd, 0x9b, 0x19, 0xcf, 0xee, 0x7b, 0x5e, 0xc3, 0x34,
	0x95, 0xa2, 0xb8, 0x55, 0xa7, 0x95, 0x2c, 0xeb, 0x92, 0x8d, 0xe8, 0x11, 0xbe, 0x86, 0xe9, 0xa5,
	0x0e, 0x47, 0xf8, 0x65, 0x8d, 0xaa, 0x66, 0xbb, 0xe0, 0x88, 0x94, 0x0f, 0x66, 0x83, 0xf9, 0x28,
	0x72, 0x44, 0x1a, 0xfe, 0x1e, 0xc0, 0x0e, 0x25, 0x28, 0x9b, 0xc1, 0x60, 0x58, 0xc5, 0x37, 0x68,
	0x72, 0x68, 0xcd, 0x4e, 0xc0, 0xbf, 0x2e, 0x65, 0x2d, 0x51, 0x29, 0xee, 0x50, 0x7c, 0x83, 0x59,
	0x08, 0xd3, 0xa4, 0xcc, 0xab, 0x4c, 0x24, 0x71, 0x2d, 0xca, 0x82, 0xbb, 0xc4, 0xf7, 0x62, 0xec,
	0x08, 0xbc, 0xbb, 0x32, 0x5b, 0xe7, 0xc8, 0x87, 0xc4, 0x1a, 0xc4, 0x5e, 0x41, 0x20, 0xd4, 0xf2,
	0x3a, 0x8b, 0x93, 0xdb, 0x86, 0x8f, 0x66, 0x83, 0xb9, 0x1f, 0xf9, 0x42, 0x5d, 0x11, 0x66, 0xc7,
	0x30, 0xd6, 0xa4, 0x90, 0xc8, 0x3d, 0xa2, 0x3c, 0xa1, 0xae, 0x84, 0x44, 0x76, 0x08, 0x9e, 0x50,
	0x4b, 0xb1, 0x8a, 0xf9, 0x98, 0xe2, 0x23, 0xa1, 0x16, 0xab, 0x58, 0x0f, 0x29, 0x8a, 0x24, 0x5b,
	0xa7, 0xa8, 0xb8, 0x3f, 0x73, 0xf5, 0x90, 0x16, 0xeb, 0x01, 0xf0, 0x5b, 0x82, 0x55, 0xcd, 0x03,
	0x62, 0x0c, 0x0a, 0x7f, 0x38, 0x10, 0xd0, 0xf6, 0x17, 0x35, 0xe6, 0xdb, 0x87, 0xd3, 0x1f, 0xcf,
	0x79, 0x7c, 0x3c, 0xf7, 0x91, 0xf1, 0x86, 0xdd, 0xf1, 0x18, 0x0c, 0xf3, 0x58, 0xde, 0xd2, 0x36,
	0x9d, 0x88, 0xd6, 0x3a, 0x56, 0xc4, 0x79, 0xbb, 0xbf, 0x20, 0xa2, 0xf5, 0x83, 0xf3, 0x1c, 0x13,
	0xd7, 0x3f, 0xcf, 0xae, 0x1e, 0x3e, 0xf1, 0xf7, 0x7a, 0xcc, 0x60, 0x22, 0x8a, 0x1b, 0x89, 0xa9,
	0xc0, 0xa2, 0x56, 0x3c, 0x20, 0xba, 0x1b, 0x62, 0x1c, 0xc6, 0x95, 0xc4, 0x3b, 0x81, 0x5f, 0x39,
	0x10, 0x6b, 0x61, 0x78, 0x05, 0xb0, 0x28, 0x54, 0x2d, 0xd7, 0x39, 0x16, 0x0f, 0xbc, 0xb2, 0x99,
	0xd6, 0xe9, 0x4c, 0x7b, 0x00, 0x23, 0x91, 0x6b, 0xbb, 0xb8, 0x14, 0x6c, 0x41, 0xf8, 0x49, 0xf7,
	0xb1, 0x2f, 0xfc, 0xa7, 0x3e, 0xf7, 0x0e, 0x69, 0x1b, 0x19, 0x14, 0xfe, 0x74, 0xc1, 0xbf, 0x8c,
	0x1b, 0xd2, 0xe8, 0x69, 0xea, 0xe3, 0xff, 0x45, 0x9f, 0x60, 0x4b, 0x9f, 0x23, 0xf0, 0x24, 0x26,
	0xa2, 0x42, 0x73, 0xf8, 0x06, 0x69, 0xdd, 0x52, 0x54, 0x89, 0x14, 0x15, 0xb5, 0x9d, 0xb4, 0xba,
	0x75, 0x42, 0xec, 0x25, 0xf8, 0xb5, 0x14, 0x98, 0x2e, 0x57, 0x0d, 0x9f, 0xb6, 0xc2, 0x11, 0xbe,
	0x68, 0xba, 0x92, 0xee, 0xf4, 0x24, 0x65, 0xe7, 0x7d, 0x3b, 0xec, 0xce, 0xdc, 0xf9, 0xe4, 0xec,
	0x79, 0x7b, 0x49, 0x9c, 0xde, 0x8b, 0xd4, 0x77, 0x08, 0x15, 0x59, 0x1f, 0x28, 0xbe, 0xb7, 0x55,
	0x64, 0x99, 0xa8, 0x9b, 0x15, 0x7e, 0x86, 0x5d, 0x7b, 0x93, 0xa8, 0xaa, 0x2c, 0x14, 0xb2, 0x39,
	0x78, 0xed, 0x9d, 0xc4, 0x07, 0xd4, 0x61, 0xdf, 0x74, 0xd8, 0x7c, 0x71, 0x91, 0xe1, 0xd9, 0x5b,
	0x08, 0xd2, 0xb8, 0x59, 0x12, 0x22, 0x25, 0x27, 0x67, 0x7b, 0x36, 0xd9, 0xa8, 0x1f, 0xf9, 0xa9,
	0x59, 0x85, 0xbf, 0x5c, 0x73, 0x69, 0x6d, 0xde, 0xf4, 0x24, 0x9c, 0x71, 0x0c, 0x63, 0xfd, 0x5c,
	0xa2, 0xfd, 0x68, 0x3d, 0x0d, 0x3f, 0x14, 0x4f, 0xd6, 0x32, 0x37, 0x71, 0x96, 0xa1, 0x6c, 0xf8,
	0xce, 0xcc, 0xd5, 0x8c, 0x81, 0xff, 0xcf, 0x32, 0xec, 0x0d, 0x8c, 0x95, 0xc8, 0x45, 0x16, 0x4b,
	0xbe, 0xff, 0x88, 0x43, 0x6c, 0xc2, 0xd9, 0xf7, 0x01, 0x78, 0xad, 0xbf, 0xd8, 0x3b, 0x08, 0x3e,
	0x62, 0x6d, 0xc0, 0x41, 0xb7, 0xc4, 0xfe, 0xc5, 0x4e, 0x0e, 0xb7, 0xa2, 0xad, 0x4f, 0xc2, 0x67,
	0xec, 0x3d, 0x4c, 0x6d, 0xed, 0x45, 0xb3, 0x48, 0xd9, 0x8b, 0x6e, 0xa2, 0xad, 0x3e, 0xe8, 0x07,
	0x6d, 0xf1, 0xca, 0xa3, 0xf0, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x04, 0xf2, 0x8e,
	0x6b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DrinksClient is the client API for Drinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DrinksClient interface {
	GetDrinks(ctx context.Context, in *DrinksRequest, opts ...grpc.CallOption) (*DrinksResponse, error)
	GetDrinkById(ctx context.Context, in *DrinkRequest, opts ...grpc.CallOption) (*DrinkResponse, error)
}

type drinksClient struct {
	cc grpc.ClientConnInterface
}

func NewDrinksClient(cc grpc.ClientConnInterface) DrinksClient {
	return &drinksClient{cc}
}

func (c *drinksClient) GetDrinks(ctx context.Context, in *DrinksRequest, opts ...grpc.CallOption) (*DrinksResponse, error) {
	out := new(DrinksResponse)
	err := c.cc.Invoke(ctx, "/proto.Drinks/GetDrinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drinksClient) GetDrinkById(ctx context.Context, in *DrinkRequest, opts ...grpc.CallOption) (*DrinkResponse, error) {
	out := new(DrinkResponse)
	err := c.cc.Invoke(ctx, "/proto.Drinks/GetDrinkById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrinksServer is the server API for Drinks service.
type DrinksServer interface {
	GetDrinks(context.Context, *DrinksRequest) (*DrinksResponse, error)
	GetDrinkById(context.Context, *DrinkRequest) (*DrinkResponse, error)
}

// UnimplementedDrinksServer can be embedded to have forward compatible implementations.
type UnimplementedDrinksServer struct {
}

func (*UnimplementedDrinksServer) GetDrinks(ctx context.Context, req *DrinksRequest) (*DrinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrinks not implemented")
}
func (*UnimplementedDrinksServer) GetDrinkById(ctx context.Context, req *DrinkRequest) (*DrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrinkById not implemented")
}

func RegisterDrinksServer(s *grpc.Server, srv DrinksServer) {
	s.RegisterService(&_Drinks_serviceDesc, srv)
}

func _Drinks_GetDrinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetDrinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/GetDrinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetDrinks(ctx, req.(*DrinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drinks_GetDrinkById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrinksServer).GetDrinkById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Drinks/GetDrinkById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrinksServer).GetDrinkById(ctx, req.(*DrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Drinks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Drinks",
	HandlerType: (*DrinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDrinks",
			Handler:    _Drinks_GetDrinks_Handler,
		},
		{
			MethodName: "GetDrinkById",
			Handler:    _Drinks_GetDrinkById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drinks.proto",
}
